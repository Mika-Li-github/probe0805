seq388 <- getSequence(chromosome = snp388$Chromosome,
start = snp388$Position,
#id = snp388$`dbSNP ID`,
type = 'chromosome_name',
seqType = 'cdna',
upstream = 800, downstream = 800, mart = mart)
searchFilters(mart, pattern = "geno")
searchFilters(mart, pattern = "ref")
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snp388 <- read_csv("SNP388.csv")
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snp388$`dbSNP ID`, snp388$Chromosome, snp388$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
View(snp_sequence)
#檢查一下有沒有重複的
value_counts <- snp_sequence %>% count(`Variant name`) %>%
filter(n > 1)
value_counts
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
BiocManager::install("Biostrings", force = TRUE)
BiocManager::install("Biostrings", force = TRUE)
#不需要轉成FASTA，就不轉
exportFASTA(snp_sequence[2,2],file="test.fasta")
#不需要轉成FASTA，就不轉
exportFASTA(snp_sequence[2,2],file="test.fasta")
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/githouse/probe0805/data")
ENSEMBL_MART_SNP <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
seq388 <- getSequence(chromosome = snp388$Chromosome,
start = snp388$Position,
#id = snp388$`dbSNP ID`,
type = 'chromosome_name',
seqType = 'cdna',
upstream = 800, downstream = 800, mart = mart)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/githouse/probe0805/data")
# ENSEMBL_MART_SNP <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# seq388 <- getSequence(chromosome = snp388$Chromosome,
#                       start = snp388$Position,
#                       #id = snp388$`dbSNP ID`,
#                       type = 'chromosome_name',
#                       seqType = 'cdna',
#                       upstream = 800, downstream = 800, mart = mart)
#  You must specify both a start and end position.
#所以我不用getSequence了
?useMart
mart = useMart('ensembl', dataset = 'hsapiens_gene_ensembl')
listDatasets(mart)
searchDatasets(mart, pattern = "hsa")
searchFilters(mart, pattern = "ref")
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snp388 <- read_csv("SNP388.csv")
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snp388$`dbSNP ID`, snp388$Chromosome, snp388$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
#檢查一下有沒有重複的
value_counts <- snp_sequence %>% count(`Variant name`) %>%
filter(n > 1)
#呵呵，沒有
#不需要轉成FASTA，就不轉
exportFASTA(snp_sequence[2,2],file="test.fasta")
#不需要轉成FASTA，就不轉
exportFASTA(snp_sequence,file="test.fasta")
#不需要轉成FASTA，就不轉
exportFASTA(snp_sequence$`Variant sequences`,file="test.fasta")
# 根據B和D進行左連接
merged_table <- snp388 %>%
left_join(snp_sequence, by = c("dbSNP ID" = "Variant name"))
View(merged_table)
View(merged_table)
# 示例DNA序列
dna_sequences <- c("ATCGGTA", "ATCGXYZ", "GATTACA", "12345", "ATCG")
# 安装并加载stringr包
if (!requireNamespace("stringr", quietly = TRUE)) {
install.packages("stringr")
}
library(stringr)
# 定义一个函数来计算不属于ATCG的字符数量
count_non_ATCG <- function(sequence) {
# 使用正则表达式匹配不属于ATCG的字符
non_ATCG_chars <- str_extract_all(sequence, "[^ATCG]", simplify = TRUE)
# 返回不属于ATCG的字符数量
return(length(non_ATCG_chars[non_ATCG_chars != ""]))
}
# 应用函数到dna_sequences
non_ATCG_counts <- sapply(dna_sequences, count_non_ATCG)
# 将结果存储为新变量
result <- data.frame(Sequence = dna_sequences, Non_ATCG_Count = non_ATCG_counts)
# 查看结果
print(result)
# 应用函数到dna_sequences
non_ATCG_counts <- sapply(snp_sequence$`Variant sequences`, count_non_ATCG)
# 将结果存储为新变量
result <- data.frame(Sequence = dna_sequences, Non_ATCG_Count = non_ATCG_counts)
View(result)
# 应用函数到dna_sequences
non_ATCG_counts <- sapply(snp_sequence$`Variant sequences`, count_non_ATCG)
# 将结果存储为新变量
result <- data.frame(snp_sequence, Non_ATCG_Count = non_ATCG_counts)
View(merged_table)
View(snp388)
View(result)
# 应用函数到dna_sequences
non_ATCG_counts <- sapply(count_non_ATCG)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/githouse/probe0805/data")
# ENSEMBL_MART_SNP <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# seq388 <- getSequence(chromosome = snp388$Chromosome,
#                       start = snp388$Position,
#                       #id = snp388$`dbSNP ID`,
#                       type = 'chromosome_name',
#                       seqType = 'cdna',
#                       upstream = 800, downstream = 800, mart = mart)
#  You must specify both a start and end position.
#所以我不用getSequence了
#不需要轉成FASTA，就不轉
?useMart
mart = useMart('ensembl', dataset = 'hsapiens_gene_ensembl')
listDatasets(mart)
searchDatasets(mart, pattern = "hsa")
searchFilters(mart, pattern = "ref")
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snp388 <- read_csv("SNP388.csv")
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snp388$`dbSNP ID`, snp388$Chromosome, snp388$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
#檢查一下有沒有重複的
value_counts <- snp_sequence %>% count(`Variant name`) %>%
filter(n > 1)
#呵呵，沒有
# 根據B和D進行左連接
merged_table <- snp388 %>%
left_join(snp_sequence, by = c("dbSNP ID" = "Variant name"))
write_csv(snp_sequence, "0802BiomAgain.csv")
View(merged_table)
View(snp_sequence)
View(merged_table)
# 示例DNA序列
dna_sequences <- c("ATCGGTA", "ATCGXYZ", "GATTACA", "12345", "ATCG")
# 安装并加载stringr包
if (!requireNamespace("stringr", quietly = TRUE)) {
install.packages("stringr")
}
library(stringr)
# 定义一个函数来提取不属于ATCG的字符，包括重复的字符
extract_non_ATCG <- function(sequence) {
# 使用正则表达式匹配不属于ATCG的字符
non_ATCG_chars <- str_extract_all(sequence, "[^ATCG]", simplify = TRUE)
# 返回所有不属于ATCG的字符，包括重复的
return(paste(non_ATCG_chars, collapse = ""))
}
# 应用函数到dna_sequences
non_ATCG_sequences <- sapply(dna_sequences, extract_non_ATCG)
# 将结果存储为新变量
result <- data.frame(Sequence = dna_sequences, Non_ATCG_Chars = non_ATCG_sequences)
# 查看结果
print(result)
non_ATCG_sequences <- sapply(snp_sequence, extract_non_ATCG)
result <- data.frame(Sequence = snp_sequence$`Variant sequences`, Non_ATCG_Chars = non_ATCG_sequences)
result <- data.frame(Sequence = snp_sequence, Non_ATCG_Chars = non_ATCG_sequences)
# 示例DNA序列
dna_sequences <- c("ATCGGTA", "ATCGXYZ", "GATTACA", "12345", "ATCG")
# 安装并加载stringr包
if (!requireNamespace("stringr", quietly = TRUE)) {
install.packages("stringr")
}
library(stringr)
# 定义一个函数来提取不属于ATCG的字符，包括重复的字符
extract_non_ATCG <- function(sequence) {
# 使用正则表达式匹配不属于ATCG的字符
non_ATCG_chars <- str_extract_all(sequence, "[^ATCG]", simplify = TRUE)
# 返回所有不属于ATCG的字符，包括重复的
return(paste(non_ATCG_chars, collapse = ""))
}
# 应用函数到dna_sequences
non_ATCG_sequences <- sapply(dna_sequences, extract_non_ATCG)
# 将结果存储为新变量
result <- data.frame(Sequence = dna_sequences, Non_ATCG_Chars = non_ATCG_sequences)
# 查看结果
print(result)
non_ATCG_sequences <- sapply(snp_sequence$`Variant sequences`, extract_non_ATCG)
result <- data.frame(Sequence = snp_sequence, Non_ATCG_Chars = non_ATCG_sequences)
result
View(result)
# 创建示例数据框
data <- data.frame(
Observation = c("abc%///%def", "ghi%///%jkl", "mno%///%pqr", "stu%///%vwx")
)
# 定义一个函数来计算"%"的数量
count_percent <- function(str) {
return(sum(strsplit(str, "")[[1]] == "%"))
}
# 应用函数到data$Observation
data$Percent_Count <- sapply(data$Observation, count_percent)
# 查看结果
print(data)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/githouse/probe0805/data")
# ENSEMBL_MART_SNP <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# seq388 <- getSequence(chromosome = snp388$Chromosome,
#                       start = snp388$Position,
#                       #id = snp388$`dbSNP ID`,
#                       type = 'chromosome_name',
#                       seqType = 'cdna',
#                       upstream = 800, downstream = 800, mart = mart)
#  You must specify both a start and end position.
#所以我不用getSequence了
#不需要轉成FASTA，就不轉
?useMart
mart = useMart('ensembl', dataset = 'hsapiens_gene_ensembl')
listDatasets(mart)
searchDatasets(mart, pattern = "hsa")
searchFilters(mart, pattern = "ref")
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snp388 <- read_csv("SNP388.csv")
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snp388$`dbSNP ID`, snp388$Chromosome, snp388$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
#檢查一下有沒有重複的
value_counts <- snp_sequence %>% count(`Variant name`) %>%
filter(n > 1)
#呵呵，沒有
# 根據B和D進行左連接
merged_table <- snp388 %>%
left_join(snp_sequence, by = c("dbSNP ID" = "Variant name"))
# 创建示例数据框
data <- data.frame(
Sequence = c("AAAC%G/T/T/G%CCG", "TTT%X/Y/Z%AAA", "GGG%1/2/3%CCC", "AAA%/B/C/D/%BBB")
)
# 安装并加载stringr包
if (!requireNamespace("stringr", quietly = TRUE)) {
install.packages("stringr")
}
library(stringr)
# 使用正则表达式提取"%%"之间的字符
data$Extracted <- str_extract(data$Sequence, "%(.*?)%")
# 去掉提取结果中的"%"
data$Extracted <- gsub("%", "", data$Extracted)
# 查看结果
print(data)
View(merged_table)
# 使用正则表达式提取"%%"之间的字符
merged_table$Extracted <- str_extract(merged_table$`Variant sequences`, "%(.*?)%")
# 去掉提取结果中的"%"
merged_table$Extracted <- gsub("%", "", merged_table$Extracted)
View(merged_table)
# 創建示例數據框
data <- data.frame(
A = c(1, 2, 3, 4, 5),
B = c(10, NA, 30, NA, 50),
C = c("a", "b", "c", "d", "e")
)
# 找出B變數為NA的整列觀測值
rows_with_na_in_B <- data[is.na(data$B), ]
# 查看結果
print(rows_with_na_in_B)
View(merged_table)
#來用chromosome找剩下序列?
# 找出B變數為NA的整列觀測值
rows_with_na_in_B <- merged_table[is.na(merged_table$`Variant sequences`), ]
#來用chromosome找剩下序列?
# 找出B變數為NA的整列觀測值
rows_with_na_in_B <- merged_table[is.na(merged_table$`Variant sequences`), ]
rows_with_na_in_B
View(rows_with_na_in_B)
# 创建示例数据框
df <- data.frame(
rsID = c("rs123456", "rs789012"),
Chromosome = c(1, 2),
Position = c(12345678, 23456789),
OtherVar1 = c("A", "B"),
OtherVar2 = c("C", "D"),
stringsAsFactors = FALSE
)
# 查看原始数据框
print("原始数据框:")
print(df)
# 定义要添加的值，并将其他变量填充为NA
new_values <- data.frame(
rsID = "rs116488202",
Chromosome = 6,
Position = 31377139,
OtherVar1 = NA,
OtherVar2 = NA,
stringsAsFactors = FALSE
)
# 将新值添加到数据框
df <- rbind(df, new_values)
# 查看更新后的数据框
print("更新后的数据框:")
print(df)
# 定义要添加的值，并将其他变量填充为NA
new_values <- data.frame(
rsID = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
`minor allele (Alternative)` = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
stringsAsFactors = FALSE
)
View(new_values)
# 将新值添加到数据框
merged_table <- rbind(merged_table, new_values)
# 定义要添加的值，并将其他变量填充为NA
new_values <- data.frame(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
`minor allele (Alternative)` = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
stringsAsFactors = FALSE
)
# 将新值添加到数据框
merged_table <- rbind(merged_table, new_values)
View(merged_table)
View(new_values)
# 定义要添加的值，并将其他变量填充为NA
new_values <- data.frame(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
`minor allele (Alternative)` = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
stringsAsFactors = FALSE
)
View(new_values)
# 定义要添加的值，并将其他变量填充为NA
new_values <- data.frame(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
"minor allele (Alternative)" = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
stringsAsFactors = FALSE
)
View(new_values)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/githouse/probe0805/data")
# ENSEMBL_MART_SNP <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# seq388 <- getSequence(chromosome = snp388$Chromosome,
#                       start = snp388$Position,
#                       #id = snp388$`dbSNP ID`,
#                       type = 'chromosome_name',
#                       seqType = 'cdna',
#                       upstream = 800, downstream = 800, mart = mart)
#  You must specify both a start and end position.
#所以我不用getSequence了
#不需要轉成FASTA，就不轉
?useMart
mart = useMart('ensembl', dataset = 'hsapiens_gene_ensembl')
listDatasets(mart)
searchDatasets(mart, pattern = "hsa")
searchFilters(mart, pattern = "ref")
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snp388 <- read_csv("SNP388.csv")
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snp388$`dbSNP ID`, snp388$Chromosome, snp388$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
#檢查一下有沒有重複的
value_counts <- snp_sequence %>% count(`Variant name`) %>%
filter(n > 1)
#呵呵，沒有
# 根據B和D進行左連接
merged_table <- snp388 %>%
left_join(snp_sequence, by = c("dbSNP ID" = "Variant name"))
# 使用正则表达式提取"%%"之间的字符
merged_table$Extracted <- str_extract(merged_table$`Variant sequences`, "%(.*?)%")
# 去掉提取结果中的"%"
merged_table$Extracted <- gsub("%", "", merged_table$Extracted)
#來用chromosome找剩下序列?
# 找出B變數為NA的整列觀測值
rows_with_na_in_B <- merged_table[is.na(merged_table$`Variant sequences`), ]
View(merged_table)
new_values <- data.frame(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
"minor allele (Alternative)" = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
stringsAsFactors = FALSE
)
View(new_values)
# 定义要添加的值，并将其他变量填充为NA
new_values <- tibble(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
"minor allele (Alternative)" = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
stringsAsFactors = FALSE
)
# 将新值添加到数据框
merged_table <- rbind(merged_table, new_values)
View(new_values)
# 定义要添加的值，并将其他变量填充为NA
new_values <- tibble(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
"minor allele (Alternative)" = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
)
# 将新值添加到数据框
merged_table <- rbind(merged_table, new_values)
View(merged_table)
# 加载 tidyverse
library(tidyverse)
# 创建示例数据框
df <- tibble(
A = c(1, 2, 3, 4, 5),
B = c("5 x 6", "a", "b", "5 x 6", "c")
)
# 查看原始数据框
print("原始数据框:")
print(df)
# 删除 B 变量包含 '5 x 6' 的整行观测值
df_filtered <- df %>% filter(B != "5 x 6")
# 查看过滤后的数据框
print("过滤后的数据框:")
print(df_filtered)
merged_table <- merged_table %>% filter(Chromosome != "5 x 6")
View(merged_table)
View(rows_with_na_in_B)
rows_with_na_in_B <- merged_table[is.na(merged_table$`Variant sequences`), ]
View(rows_with_na_in_B)
View(rows_with_na_in_B)
snp_sequence_na <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(rows_with_na_in_B$Chromosome, rows_with_na_in_B$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
snp_sequence_na <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(rows_with_na_in_B$Chromosome, rows_with_na_in_B$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
