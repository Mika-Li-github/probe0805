type = "gene_flank",  # 指定序列类型为gene_flank
mart = ensembl_human)
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = gene_flank,  # 指定序列类型为gene_flank
mart = ensembl_human)
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = 'gene_flank',  # 指定序列类型为gene_flank
mart = ensembl_human)
library(tidyverse)
library(biomaRt)
library(BiocManager)
#找找序列
getSequence()
library(tidyverse)
library(biomaRt)
library(BiocManager)
#找找序列
#getSequence()
listEnsembl()
ensembl <- useEnsembl(biomart = "genes")
searchDatasets(mart = ensembl, pattern = "hsapiens")
ensembl <- useDataset(dataset = "hsapiens_gene_ensembl", mart = ensembl)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
filters = listFilters(ensembl)
#	start Start
# end End
#也許可以用上面的
snps <- useEnsembl(biomart = "snps")
searchDatasets(mart = snps, pattern = "hsapiens")
snps <- useEnsembl(biomart = "snps", dataset = "hsapiens_snp")
#12           hsapiens_snp         Human Short Variants (SNPs and indels excluding flagged variants) (GRCh38.p14) GRCh38.p14
attr = listAttributes(snps)
attr
# 连接到Ensembl BioMart数据库
ensembl <- useMart("ensembl")
# 选择人类基因数据集
ensembl_human <- useDataset("hsapiens_gene_ensembl", mart = ensembl)
# 获取HBB基因的位置信息
gene_info <- getBM(attributes = c("entrezgene_accession", "chromosome_name", "start_position", "end_position"),
filters = "entrezgene_accession",
values = "HBB",
mart = ensembl_human)
# 打印基因位置信息
print(gene_info)
# 获取上游和下游序列
chromosome <- gene_info$chromosome_name
start_position <- gene_info$start_position
end_position <- gene_info$end_position
upstream_length <- 500
downstream_length <- 500
# 计算上游和下游的范围
upstream_start <- max(1, start_position - upstream_length)
downstream_end <- end_position + downstream_length
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = 'gene_flank',  # 指定序列类型为gene_flank
mart = ensembl_human)
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = 'coding_gene_flank',  # Example of a valid type
mart = ensembl_human)
# 获取基因组序列
genome_seq <- getSequence(chromosome = chromosome,
start = upstream_start,
end = downstream_end,
type = 'cdna',  # Example of a valid type
mart = ensembl_human)
library(tidyverse)
library(biomaRt)
library(BiocManager)
#找找序列
#getSequence()
listEnsembl()
ensembl <- useEnsembl(biomart = "genes")
searchDatasets(mart = ensembl, pattern = "hsapiens")
ensembl <- useDataset(dataset = "hsapiens_gene_ensembl", mart = ensembl)
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
filters = listFilters(ensembl)
#	start Start
# end End
#也許可以用上面的
snps <- useEnsembl(biomart = "snps")
searchDatasets(mart = snps, pattern = "hsapiens")
snps <- useEnsembl(biomart = "snps", dataset = "hsapiens_snp")
#12           hsapiens_snp         Human Short Variants (SNPs and indels excluding flagged variants) (GRCh38.p14) GRCh38.p14
attr = listAttributes(snps)
attr
if(interactive()){
mart <- useEnsembl("ensembl", dataset="hsapiens_gene_ensembl")
seq = getSequence(id = "BRCA1",
type = "hgnc_symbol",
seqType = "peptide",
mart = mart)
show(seq)
seq = getSequence(id="1939_at",
type="affy_hg_u95av2",
seqType="gene_flank",
upstream = 20,
mart = mart)
show(seq)
}
if(interactive()){
mart <- useEnsembl("ensembl", dataset="hsapiens_gene_ensembl")
seq = getSequence(id = "BRCA1",
type = "hgnc_symbol",
seqType = "peptide",
mart = mart)
show(seq)
seq = getSequence(id="1939_at",
type="affy_hg_u95av2",
seqType="gene_flank",
upstream = 20,
mart = mart)
show(seq)
}
if(interactive()){
mart <- useEnsembl("ensembl", dataset="hsapiens_gene_ensembl")
seq = getSequence(id = "BRCA1",
type = "hgnc_symbol",
seqType = "peptide",
mart = mart)
show(seq)
seq = getSequence(id="1939_at",
type="affy_hg_u95av2",
seqType="gene_flank",
upstream = 20,
mart = mart)
show(seq)
}
if(interactive()){
mart <- useEnsembl("ensembl", dataset="hsapiens_gene_ensembl")
seq = getSequence(id = "BRCA1",
type = "hgnc_symbol",
seqType = "peptide",
mart = mart)
show(seq)
seq = getSequence(id="1939_at",
type="affy_hg_u95av2",
seqType="gene_flank",
upstream = 20,
mart = mart)
show(seq)
}
library(biomaRt)
if(interactive()){
mart <- useEnsembl("ensembl", dataset="hsapiens_gene_ensembl")
seq = getSequence(id = "BRCA1",
type = "hgnc_symbol",
seqType = "peptide",
mart = mart)
show(seq)
seq = getSequence(id="1939_at",
type="affy_hg_u95av2",
seqType="gene_flank",
upstream = 20,
mart = mart)
show(seq)
}
library(tidyverse)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/githouse/probe0805/data")
# ENSEMBL_MART_SNP <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# seq388 <- getSequence(chromosome = snp388$Chromosome,
#                       start = snp388$Position,
#                       #id = snp388$`dbSNP ID`,
#                       type = 'chromosome_name',
#                       seqType = 'cdna',
#                       upstream = 800, downstream = 800, mart = mart)
#  You must specify both a start and end position.
#所以我不用getSequence了
#不需要轉成FASTA，就不轉
?useMart
mart = useMart('ensembl', dataset = 'hsapiens_gene_ensembl')
listDatasets(mart)
searchDatasets(mart, pattern = "hsa")
searchFilters(mart, pattern = "ref")
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snp388 <- read_csv("SNP388.csv")
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snp388$`dbSNP ID`, snp388$Chromosome, snp388$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
#檢查一下有沒有重複的
value_counts <- snp_sequence %>% count(`Variant name`) %>%
filter(n > 1)
#呵呵，沒有
# 根據B和D進行左連接
merged_table <- snp388 %>%
left_join(snp_sequence, by = c("dbSNP ID" = "Variant name"))
# 使用正则表达式提取"%%"之间的字符
merged_table$Extracted <- str_extract(merged_table$`Variant sequences`, "%(.*?)%")
# 去掉提取结果中的"%"
merged_table$Extracted <- gsub("%", "", merged_table$Extracted)
#來用chromosome找剩下序列?
# 找出B變數為NA的整列觀測值
rows_with_na_in_B <- merged_table[is.na(merged_table$`Variant sequences`), ]
# 定义要添加的值，并将其他变量填充为NA
new_values <- tibble(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
"minor allele (Alternative)" = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
)
# 将新值添加到数据框
merged_table <- rbind(merged_table, new_values)
merged_table <- merged_table %>% filter(Chromosome != "5 x 6")
#開補序列
# rows_with_na_in_B <- merged_table[is.na(merged_table$`Variant sequences`), ]
#
# snp_sequence_na <- getBM(attributes = c("refsnp_id",
#                                      "snp"),
#                       filters = c("chr_name", "start", "upstream_flank", "downstream_flank"),
#                       values = list(rows_with_na_in_B$Chromosome, rows_with_na_in_B$Position, 800, 800),
#                       mart = ensembl,
#                       checkFilters = FALSE,
#                       bmHeader = TRUE
# )
#跑超久是怎樣(11:51開始，11:55都還沒結束)
#先去python看?下一步用的新工具也許可以補這個功能
#當前發現紀錄於mindmap「例外」中。
#想要用序列找，若是用getSequence()，會需要end。但是又似乎沒有snp的序列資料
#而其他還有merged的rsId，位置不同，有爭議，先不要動
#先把沒爭議的序列做成表格
View(merged_table)
View(merged_table)
#再找一次序列
snp_sequence_i <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snp388$`dbSNP ID`, snp388$Chromosome, snp388$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
View(snp_sequence_i)
#再找一次序列
snp_sequence_i <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(merged_table$`dbSNP ID`, merged_table$Chromosome, merged_table$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
View(snp_sequence_i)
View(snp_sequence)
snp_sequence_i <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(rs116488202, 6, 31377139, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
snp_sequence_inte <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list("rs116488202", 6, 31377139, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
View(snp_sequence_inte)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/githouse/probe0805/data")
# ENSEMBL_MART_SNP <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# seq388 <- getSequence(chromosome = snp388$Chromosome,
#                       start = snp388$Position,
#                       #id = snp388$`dbSNP ID`,
#                       type = 'chromosome_name',
#                       seqType = 'cdna',
#                       upstream = 800, downstream = 800, mart = mart)
#  You must specify both a start and end position.
#所以我不用getSequence了
#不需要轉成FASTA，就不轉
# ?useMart
mart = useMart('ensembl', dataset = 'hsapiens_gene_ensembl')
# listDatasets(mart)
# searchDatasets(mart, pattern = "hsa")
# searchFilters(mart, pattern = "ref")
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snp388 <- read_csv("SNP388.csv")
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snp388$`dbSNP ID`, snp388$Chromosome, snp388$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
#檢查一下有沒有重複的
value_counts <- snp_sequence %>% count(`Variant name`) %>%
filter(n > 1)
#呵呵，沒有
# 根據B和D進行左連接
merged_table <- snp388 %>%
left_join(snp_sequence, by = c("dbSNP ID" = "Variant name"))
# 使用正则表达式提取"%%"之间的字符
merged_table$Extracted <- str_extract(merged_table$`Variant sequences`, "%(.*?)%")
# 去掉提取结果中的"%"
merged_table$Extracted <- gsub("%", "", merged_table$Extracted)
#來用chromosome找剩下序列?
# 找出B變數為NA的整列觀測值
rows_with_na_in_B <- merged_table[is.na(merged_table$`Variant sequences`), ]
#我把interaction那個沒有的也加入了
# 定义要添加的值，并将其他变量填充为NA
new_values <- tibble(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
"minor allele (Alternative)" = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
)
# 将新值添加到数据框
merged_table <- rbind(merged_table, new_values)
#也把紀錄interaction的觀測值刪了
merged_table <- merged_table %>% filter(Chromosome != "5 x 6")
#再找一次序列
snp_sequence_i <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(merged_table$`dbSNP ID`, merged_table$Chromosome, merged_table$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
#開補序列
# rows_with_na
View(merged_table)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/githouse/probe0805/data")
snp388 <- read_csv("SNP388.csv")
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
#我把interaction那個沒有的也加入了
# 定义要添加的值，并将其他变量填充为NA
new_values <- tibble(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
"minor allele (Alternative)" = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
)
merged_table <- rbind(snp388, new_values)
View(new_values)
new_values <- tibble(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
"minor allele (Alternative)" = NA,
`minor allele` = NA,
`MAF`  = NA#,
# `Variant sequences` = NA,
# Extracted = NA,
)
merged_table <- rbind(snp388, new_values)
View(merged_table)
View(merged_table)
merged_table <- merged_table %>% filter(Chromosome != "5 x 6")
View(merged_table)
snp_sequence_i <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(merged_table$`dbSNP ID`, merged_table$Chromosome, merged_table$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
View(snp_sequence_i)
View(snp_sequence_i)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/githouse/probe0805/data")
# ENSEMBL_MART_SNP <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# seq388 <- getSequence(chromosome = snp388$Chromosome,
#                       start = snp388$Position,
#                       #id = snp388$`dbSNP ID`,
#                       type = 'chromosome_name',
#                       seqType = 'cdna',
#                       upstream = 800, downstream = 800, mart = mart)
#  You must specify both a start and end position.
#所以我不用getSequence了
#不需要轉成FASTA，就不轉
# ?useMart
mart = useMart('ensembl', dataset = 'hsapiens_gene_ensembl')
# listDatasets(mart)
# searchDatasets(mart, pattern = "hsa")
# searchFilters(mart, pattern = "ref")
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snp388 <- read_csv("SNP388.csv")
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snp388$`dbSNP ID`, snp388$Chromosome, snp388$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
#檢查一下有沒有重複的
value_counts <- snp_sequence %>% count(`Variant name`) %>%
filter(n > 1)
#呵呵，沒有
# 根據B和D進行左連接
merged_table <- snp388 %>%
left_join(snp_sequence, by = c("dbSNP ID" = "Variant name"))
# 使用正则表达式提取"%%"之间的字符
merged_table$Extracted <- str_extract(merged_table$`Variant sequences`, "%(.*?)%")
# 去掉提取结果中的"%"
merged_table$Extracted <- gsub("%", "", merged_table$Extracted)
#來用chromosome找剩下序列?
# 找出B變數為NA的整列觀測值
rows_with_na_in_B <- merged_table[is.na(merged_table$`Variant sequences`), ]
#我把interaction那個沒有的也加入了
# 定义要添加的值，并将其他变量填充为NA
new_values <- tibble(
`dbSNP ID` = "rs116488202",
Chromosome = 6,
Position = 31377139,
`ref allele` = NA,
"minor allele (Alternative)" = NA,
`minor allele` = NA,
`MAF`  = NA,
`Variant sequences` = NA,
Extracted = NA,
)
View(snp_sequence)
library(tidyverse)
library(biomaRt)
library(BiocManager)
setwd("C:/Users/mikali/Desktop/githouse/probe0805/data")
# ENSEMBL_MART_SNP <- useEnsembl("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# seq388 <- getSequence(chromosome = snp388$Chromosome,
#                       start = snp388$Position,
#                       #id = snp388$`dbSNP ID`,
#                       type = 'chromosome_name',
#                       seqType = 'cdna',
#                       upstream = 800, downstream = 800, mart = mart)
#  You must specify both a start and end position.
#所以我不用getSequence了
#不需要轉成FASTA，就不轉
# ?useMart
mart = useMart('ensembl', dataset = 'hsapiens_gene_ensembl')
# listDatasets(mart)
# searchDatasets(mart, pattern = "hsa")
# searchFilters(mart, pattern = "ref")
ensembl <- useEnsembl(biomart = "snps")
ensembl <- useDataset(dataset = "hsapiens_snp", mart = ensembl)
snp388 <- read_csv("SNP388.csv")
snp_sequence <- getBM(attributes = c("refsnp_id",
"snp"),
filters = c("snp_filter", "chr_name", "start", "upstream_flank", "downstream_flank"),
values = list(snp388$`dbSNP ID`, snp388$Chromosome, snp388$Position, 800, 800),
mart = ensembl,
checkFilters = FALSE,
bmHeader = TRUE
)
#檢查一下有沒有重複的
value_counts <- snp_sequence %>% count(`Variant name`) %>%
filter(n > 1)
#呵呵，沒有
# 根據B和D進行左連接
merged_table <- snp388 %>%
left_join(snp_sequence, by = c("dbSNP ID" = "Variant name"))
# 使用正则表达式提取"%%"之间的字符
merged_table$Extracted <- str_extract(merged_table$`Variant sequences`, "%(.*?)%")
# 去掉提取结果中的"%"
merged_table$Extracted <- gsub("%", "", merged_table$Extracted)
#來用chromosome找剩下序列?
# 找出B變數為NA的整列觀測值
rows_with_na_in_B <- merged_table[is.na(merged_table$`Variant sequences`), ]
View(snp_sequence)
View(merged_table)
write_csv(merged_table, "seq381.csv")
View(rows_with_na_in_B)
